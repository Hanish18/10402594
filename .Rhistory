devtools::install_github("deanmarchiori/ozdates")
install.packages("devtools")
devtools::install_github("deanmarchiori/ozdates")
library(ozdates)
library(dplyr)
install.packages("dplyr")
install.packages("lubridate")
install.packages(c("dplyr", "stringi"))
ozdates
aus_public_holidays
head(aus_public_holidays )
View(aus_public_holidays)
View(aus_public_holidays)
data<-aus_public_holidays
colnames(data)
datekey <- gsub('-','',data$date)
datekey
datekey <-as.integer( gsub('-','',data$date))
datekey
data <-cbind(datekey,data)
View(data)
write.csv(data, file = "aus_public_holidays.csv")
library(readxl)
AUAllOrders16_18 <- read_excel("C:/Users/harsha.jarugu/Downloads/AUAllOrders16-18.xlsx")
View(AUAllOrders16_18)
View(AUAllOrders16_18)
library(sqldf)
install.packages("sqldf")
colnames(AUAllOrders16_18)
standard_Product_details <- sqldf(
'select distinct
Description
[Product Category] as Category
from AUAllOrders16_18
'
)
library(sqldf)
standard_Product_details <- sqldf(
'select distinct
Description
[Product Category] as Category
from AUAllOrders16_18
'
)
standard_Product_details <- sqldf(
'select distinct
Description,
[Product Category] as Category
from AUAllOrders16_18
'
)
standard_Product_details
View(standard_Product_details)
View(standard_Product_details)
View(standard_Product_details)
write.csv(standard_Product_details, file = "standard_Product_details.csv")
colnames(AUAllOrders16_18)
standard_Product_details <- sqldf(
'select distinct
ProductID,
Description,
[Product Category] as Category
from AUAllOrders16_18
'
)
View(standard_Product_details)
standard_Product_details <- sqldf(
'select distinct
ProductID,
Description,
[Product Category] as Category
from AUAllOrders16_18 order by ProductID asc
'
)
View(standard_Product_details)
write.csv(standard_Product_details, file = "standard_Product_details.csv",index= FALSE)
write.csv(standard_Product_details, file = "standard_Product_details.csv",row.names = FALSE)
write.csv(standard_Product_details, file = "standard_Product_details.csv",row.names = FALSE)
library(shiny); runApp('C:/Users/harsha.jarugu/Desktop/Corals/Corals.R')
runApp('C:/Users/harsha.jarugu/Desktop/Corals/Corals.R')
library(readxl)
library(sqldf)
library(ggplot2)
library(ggthemes)
library(shiny)
library(plotly)
runApp('C:/Users/harsha.jarugu/Desktop/Corals/Corals.R')
Coral_data <- read_excel("CoralBleaching.xlsx")
setwd("C:/Users/harsha.jarugu/Desktop/Corals")
runApp('Corals.R')
Coral_data <- read_excel("CoralBleaching.xlsx")
corals <- as.data.frame(Coral_data)
colnames(corals)[colnames(corals)=="LAT"] <-'latitude'
colnames(corals)[colnames(corals)=="LON"] <-'longitude'
corals$PERCENTAGE_AFFECTED <- as.numeric(gsub("\\$", "", corals$PERCENTAGE_AFFECTED))
corals$PERCENTAGE_AFFECTED[is.na(corals$PERCENTAGE_AFFECTED)] <- 0
corals$CORAL_SPECIES[is.na(corals$CORAL_SPECIES)] <-'Unknown'
corals <- sqldf("select * from corals where latitude is not null ANd longitude is not null")
corals_severity<- sqldf("
select
COUNTRY_CODE, COUNTRY,CAST(YEAR AS CHAR) YEAR,count(*) as corals
from
corals
group by COUNTRY_CODE,COUNTRY,YEAR
order by COUNTRY,YEAR DESC
")
coral_plot <- sqldf("
select
COUNTRY,LOCATION,latitude,longitude
,CORAL_SPECIES
,ROUND(AVG(PERCENTAGE_AFFECTED),0) AS PERCENTAGE_AFFECTED
from
corals
group by
COUNTRY,LOCATION,latitude,longitude,CORAL_SPECIES
")
coral_plot$PERCENTAGE_AFFECTED <- paste(coral_plot$PERCENTAGE_AFFECTED,"%", sep = "")
Colors_DF = data.frame(color = topo.colors(50, alpha = NULL), stringsAsFactors = FALSE)
ui <- fluidPage(
# Application title
titlePanel("Coral Reef Analysis"),
sidebarPanel(
h3("Corals Bleaching and Location"),
# Select Justices name here
selectizeInput("name",
label = "Country Name(s) of Interest",
choices = unique(corals_severity$COUNTRY),
multiple = F,
options = list(placeholder = 'Select a Country'),
selected = "Australia"),
# Term plot
plotOutput("termPlot", height = 200),
helpText("You can select maximum of One country to understand the bleaching status of corals
in selected Country
")
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot"),
leafletOutput("CoralsLocation")
)
)
server <-function(input, output, session) {
output$trendPlot <- renderPlotly({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
df_trend <- corals_severity[corals_severity$COUNTRY == input$name, ]
ggplot(df_trend) +
geom_line(aes(x = YEAR, y = corals, by = COUNTRY, color = COUNTRY)) +
labs(x = "YEAR", y = "corals Count", title = "Total corals with High/Medium bleeching") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
}
})
output$CoralsLocation <- renderLeaflet({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
coral_plot <- coral_plot[coral_plot$COUNTRY == input$name, ]
leaflet(coral_plot)%>%
addTiles()%>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = paste("Location",coral_plot$LOCATION , "<br>",
"Coral Species", coral_plot$CORAL_SPECIES, "<br>",
"Percentage Affected:", coral_plot$PERCENTAGE_AFFECTED)
)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
# Application title
titlePanel("Coral Reef Analysis"),
sidebarPanel(
h3("Corals Bleaching and Location"),
# Select Justices name here
selectizeInput("name",
label = "Country Name(s) of Interest",
choices = unique(corals_severity$COUNTRY),
multiple = F,
options = list(placeholder = 'Select a Country'),
selected = "Australia"),
# Term plot
plotOutput("termPlot", height = 200),
helpText("You can select maximum of One country to understand the bleaching status of corals
in selected Country
")
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot"),
leafletOutput("CoralsLocation")
)
)
ui <- fluidPage(
# Application title
titlePanel("Coral Reef Analysis"),
sidebarPanel(
h3("Corals Bleaching and Location"),
# Select Justices name here
selectizeInput("name",
label = "Country Name(s) of Interest",
choices = unique(corals_severity$COUNTRY),
multiple = F,
options = list(placeholder = 'Select a Country'),
selected = "Australia"),
# Term plot
plotOutput("termPlot", height = 200),
helpText("You can select maximum of One country to understand the bleaching status of corals
in selected Country
")
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("trendPlot"),
leafletOutput("CoralsLocation")
)
)
server <-function(input, output, session) {
output$trendPlot <- renderPlotly({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
df_trend <- corals_severity[corals_severity$COUNTRY == input$name, ]
ggplot(df_trend) +
geom_line(aes(x = YEAR, y = corals, by = COUNTRY, color = COUNTRY)) +
labs(x = "YEAR", y = "corals Count", title = "Total corals with High/Medium bleeching") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
}
})
output$CoralsLocation <- renderLeaflet({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
coral_plot <- coral_plot[coral_plot$COUNTRY == input$name, ]
leaflet(coral_plot)%>%
addTiles()%>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = paste("Location",coral_plot$LOCATION , "<br>",
"Coral Species", coral_plot$CORAL_SPECIES, "<br>",
"Percentage Affected:", coral_plot$PERCENTAGE_AFFECTED)
)
}
})
}
shinyApp(ui, server)
install.packages("leaflet")
library("leaflet")
Coral_data <- read_excel("CoralBleaching.xlsx")
corals <- as.data.frame(Coral_data)
colnames(corals)[colnames(corals)=="LAT"] <-'latitude'
runApp('Corals.R')
shiny::runApp('~/Desktop/Sem-4/IE/AccidentPatternsVic/AccidentPatternsVic')
runApp('~/Desktop/Sem-4/IE/AccidentPatternsVic/AccidentPatternsVic')
runApp('~/Desktop/Sem-4/IE/AccidentPatternsVic/AccidentPatternsVic')
runApp('~/Desktop/Sem-4/IE/AccidentPatternsVic/AccidentPatternsVic')
Coral_data <- read_excel("CoralBleaching.xlsx")
runApp()
packages<- c("readxl","sqldf","ggplot2","plotly","shiny","ggthemes","leaflet")
install.packages(packages)
install.packages(packages)
shiny::runApp('~/Desktop/Sem-4/IE/AccidentPatternsVic/AccidentPatternsVic')
library(readxl)
library(sqldf)
library(ggplot2)
library(ggthemes)
library(shiny)
library(plotly)
library("leaflet")
runApp()
Coral_data <- read_excel("CoralBleaching.xlsx")
corals <- as.data.frame(Coral_data)
colnames(corals)[colnames(corals)=="LAT"] <-'latitude'
colnames(corals)[colnames(corals)=="LON"] <-'longitude'
corals$PERCENTAGE_AFFECTED <- as.numeric(gsub("\\$", "", corals$PERCENTAGE_AFFECTED))
corals$PERCENTAGE_AFFECTED[is.na(corals$PERCENTAGE_AFFECTED)] <- 0
corals$CORAL_SPECIES[is.na(corals$CORAL_SPECIES)] <-'Unknown'
corals <- sqldf("select * from corals where latitude is not null ANd longitude is not null")
corals_severity<- sqldf("
select
COUNTRY_CODE, COUNTRY,CAST(YEAR AS CHAR) YEAR,count(*) as corals
from
corals
group by COUNTRY_CODE,COUNTRY,YEAR
order by COUNTRY,YEAR DESC
")
coral_plot <- sqldf("
select
COUNTRY,LOCATION,latitude,longitude
,CORAL_SPECIES
,ROUND(AVG(PERCENTAGE_AFFECTED),0) AS PERCENTAGE_AFFECTED
from
corals
group by
COUNTRY,LOCATION,latitude,longitude,CORAL_SPECIES
")
coral_plot$PERCENTAGE_AFFECTED <- paste(coral_plot$PERCENTAGE_AFFECTED,"%", sep = "")
Colors_DF = data.frame(color = topo.colors(50, alpha = NULL), stringsAsFactors = FALSE)
CountryList = sort(unique(corals_severity$COUNTRY))
ui = dashboardPage( skin ="blue",
dashboardHeader(
title ="Hidden Patterns",
titleWidth =200
),
dashboardSidebar(disable = FALSE,width = 200,
sidebarMenu(
menuItem("Important Factors",tabName = "menu1"),
)
),
dashboardBody(
#css
tags$head(tags$style(HTML('
.content{
padding-top :3px;}
.dashboardHeaderr .logo {
font-family: "Georgia";
font-weight: 800;
line-height: 1.1;
color: black;
}
}
h3{
font-weight: 800;
font-family: "Georgia";
line-height: 1.1;
color: black;
}
.img-local{
align :right;
}
'))),
#creating different tabs
tabItems(
tabItem(tabName ="menu1",
h3("Road Accident Analysis - Important Factors "),
fluidRow(
column(width =3,
box(title ="Filter", solidHeader = T, status ="primary",width = 100,
selectInput(inputId = "CountrySelected","Year",choices = CountryList,selected = "2013")
)),
column(width =9,
box(  width =100,
#plotOutput("trendPlot")
withLoader(plotOutput("trendPlot"), type='image', loader='Spinner.gif')
),
box(
width =100,
withLoader(plotOutput("CoralsLocation"), type='image', loader='Spinner.gif')
)
)
)
)
)))
server<-function(input, output){
output$trendPlot = renderPlot({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
df_trend <- corals_severity[corals_severity$COUNTRY == input$CountrySelected, ]
ggplot(df_trend) +
geom_line(aes(x = YEAR, y = corals, by = COUNTRY, color = COUNTRY)) +
labs(x = "YEAR", y = "corals Count", title = "Total corals with High/Medium bleeching") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
}
})
###################################################
output$CoralsLocation = renderLeaflet({
if (length(input$name) == 0) {
print("Please select at least one country")
} else {
coral_plot <- coral_plot[coral_plot$COUNTRY == input$CountrySelected, ]
leaflet(coral_plot)%>%
addTiles()%>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = paste("Location",coral_plot$LOCATION , "<br>",
"Coral Species", coral_plot$CORAL_SPECIES, "<br>",
"Percentage Affected:", coral_plot$PERCENTAGE_AFFECTED)
)
}
})
}
# call shinyApp and launch it
shinyApp(ui=ui, server=server)
runApp()
runApp()
runApp()
runApp()
library(plotly)
library("leaflet")
library(ElemStatLearn)
#dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
library(FSelector)
library(shinydashboard)
#setting dashboard theme
theme_set(theme_classic())
runApp()
runApp('Corals.R')
runApp('Corals.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
